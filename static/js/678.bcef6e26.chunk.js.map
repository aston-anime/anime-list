{"version":3,"file":"static/js/678.bcef6e26.chunk.js","mappings":"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","sources":["hooks/useDataFetching.ts","webpack://anime-list/./src/pages/Detailed-item/Detailed-item.module.css?2258","pages/Detailed-item/Detailed-item.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {AnimeData} from '../types/animeData';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst options: any = {\n    method: 'GET',\n    headers: {\n        'X-RapidAPI-Key': process.env.REACT_APP_EHB_ACCESS_KEY,\n        'X-RapidAPI-Host': 'anime-db.p.rapidapi.com',\n    },\n};\n\nconst useDataFetching = (url: string): AnimeData | null => {\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(url, options);\n                const json = await response.json();\n                setData(json);\n            } catch (error) {\n                // eslint-disable-next-line no-console\n                console.log('error', error);\n            }\n        };\n        fetchData();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return data;\n};\n\nexport {useDataFetching};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Detailed-item_container__7j2xg\",\"btn\":\"Detailed-item_btn__FncvB\",\"title\":\"Detailed-item_title__HVqYs\",\"description\":\"Detailed-item_description__f71G-\",\"info\":\"Detailed-item_info__wo7al\",\"info_item\":\"Detailed-item_info_item__3l+sY\",\"light\":\"Detailed-item_light__0091d\"};","import {useNavigate, useParams} from 'react-router-dom';\nimport {useContext} from 'react';\n\nimport cn from 'classnames';\n\nimport {ThemeContext} from '../../services/theme/ThemeProvider';\nimport {useDataFetching} from '../../hooks/useDataFetching';\n\nimport styles from './Detailed-item.module.css';\n\nfunction DetailedItem() {\n    const navigate = useNavigate();\n    const {theme} = useContext(ThemeContext);\n\n    type ThemeClassType = {\n        dark: string;\n        light: string;\n        [key: string]: string;\n    };\n    const ThemeClass: ThemeClassType = {\n        dark: styles.light,\n        light: 'text-dark',\n    };\n\n    const params = useParams();\n\n    const anime = useDataFetching(`https://anime-db.p.rapidapi.com/anime/by-id/${params.id}`);\n\n    const handleClick = () => {\n        navigate('/anime-list');\n    };\n\n    return (\n        <div className={cn(styles.container, {'text-primary': theme === 'light'})}>\n            {anime ? (\n                <>\n                    <h2 className={styles.title}>{anime.title}</h2>\n                    <div className={styles.description}>\n                        <img src={anime.image} alt=\"\" />\n                        <div className={styles.info}>\n                            <p className={styles.info_item}>\n                                Alternative Titles:\n                                <span\n                                    className={ThemeClass[theme]}\n                                >{` ${anime.alternativeTitles}`}</span>\n                            </p>\n                            <p className={styles.info_item}>\n                                Type:\n                                <span className={ThemeClass[theme]}>{` ${anime.type}`}</span>\n                            </p>\n                            <p className={styles.info_item}>\n                                Episodes:\n                                <span className={ThemeClass[theme]}>{` ${anime.episodes}`}</span>\n                            </p>\n                            <p className={styles.info_item}>\n                                Status:\n                                <span className={ThemeClass[theme]}>{` ${anime.status}`}</span>\n                            </p>\n                            <p className={styles.info_item}>\n                                Genres:\n                                <span className={ThemeClass[theme]}>{` ${anime.genres}`}</span>\n                            </p>\n                            <p className={styles.info_item}>\n                                Ranking:\n                                <span className={ThemeClass[theme]}>{` ${anime.ranking}`}</span>\n                            </p>\n                        </div>\n                    </div>\n                    <div className={styles.synopsis}>\n                        <div>Synopsis </div>\n                        <div>\n                            <span className={ThemeClass[theme]}>{` ${anime.synopsis}`}</span>\n                        </div>\n                    </div>\n                </>\n            ) : (\n                <div>LOADING...</div>\n            )}\n\n            <button type=\"button\" className={`${styles.btn} btn btn-primary`} onClick={handleClick}>\n                Go back\n            </button>\n        </div>\n    );\n}\n\nexport {DetailedItem};\n"],"names":["options","method","headers","process","useDataFetching","url","_useState","useState","_useState2","_slicedToArray","data","setData","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","json","wrap","_context","prev","next","fetch","sent","t0","console","log","stop","apply","arguments","DetailedItem","navigate","useNavigate","theme","useContext","ThemeContext","ThemeClass","dark","styles","light","params","useParams","anime","concat","id","_jsxs","className","cn","container","children","_Fragment","_jsx","title","description","src","image","alt","info","info_item","alternativeTitles","type","episodes","status","genres","ranking","synopsis","btn","onClick"],"sourceRoot":""}