{"version":3,"file":"static/js/848.8860ac03.chunk.js","mappings":"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","sources":["webpack://anime-list/./src/components/Card/Card.module.css?4f06","components/Card/Card.tsx","webpack://anime-list/./src/components/CardList/CardList.module.css?f86e","components/CardList/CardList.tsx","services/applyFilter.tsx","services/updateHistory.ts","components/SearchResultsList/SearchResultsList.tsx","webpack://anime-list/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.tsx","hooks/useDataFetching.ts","webpack://anime-list/./src/pages/Search/Search.module.css?89fb","pages/Search/Search.tsx","services/renameIdsInData.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__-SwHU\",\"img_wrp\":\"Card_img_wrp__w6RzI\",\"img\":\"Card_img__8Ehvv\",\"card_body\":\"Card_card_body__xpDzb\",\"card_characteristics\":\"Card_card_characteristics__wNOHp\",\"ranking\":\"Card_ranking__dOgZk\",\"ranking_star\":\"Card_ranking_star__gD4Zt\",\"episodes\":\"Card_episodes__eyqo9\",\"title\":\"Card_title__A6GVy\",\"view_btn\":\"Card_view_btn__8AoZW\",\"favorite\":\"Card_favorite__mfXCn\",\"favoriteButton\":\"Card_favoriteButton__-ELin\"};","import {useState} from 'react';\nimport {useNavigate} from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport {AnimeWithId} from '../../types/state';\n\nimport styles from './Card.module.css';\n\nfunction Card({id, title, image, ranking, episodes, setFavoritesAnime = () => {}}: AnimeWithId) {\n    const navigate = useNavigate();\n\n    const [isFavorite, setIsFavorite] = useState<boolean>(\n        !!localStorage.getItem(JSON.stringify(id))\n    );\n\n    const handleLikeClick = (idAnime: number) => {\n        if (isFavorite) {\n            delete localStorage[JSON.stringify(idAnime)];\n            setIsFavorite(false);\n            setFavoritesAnime(Object.values(localStorage).map((item) => JSON.parse(item)));\n            return;\n        }\n\n        localStorage.setItem(\n            JSON.stringify(id),\n            JSON.stringify({id, title, image, ranking, episodes})\n        );\n    };\n\n    const handleClickDetailedPage = (idAnime: number) => {\n        navigate(`/anime-list/detailed-item/${idAnime}`);\n    };\n\n    return (\n        <article className={`${styles.card} card border-primary`}>\n            <button\n                className={`${styles.favoriteButton} ${isFavorite ? styles.favorite : ''}`}\n                type=\"button\"\n                onClick={() => handleLikeClick(id)}\n            >\n                <svg\n                    width=\"23\"\n                    height=\"20\"\n                    viewBox=\"0 0 23 20\"\n                    fill=\"currentColor\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        d=\"M20.3807 2.59133C19.8676 2.08683 19.2583 1.68663 18.5878 1.41358C17.9172 1.14054 17.1985 1 16.4727 1C15.7468 1 15.0281 1.14054 14.3576 1.41358C13.687 1.68663 13.0778 2.08683 12.5646 2.59133L11.4997 3.63785L10.4348 2.59133C9.39834 1.57276 7.99258 1.00053 6.52679 1.00053C5.06099 1.00053 3.65523 1.57276 2.61876 2.59133C1.58229 3.6099 1 4.99139 1 6.43187C1 7.87235 1.58229 9.25383 2.61876 10.2724L3.68367 11.3189L11.4997 19L19.3158 11.3189L20.3807 10.2724C20.8941 9.76814 21.3013 9.16942 21.5791 8.51045C21.857 7.85148 22 7.14517 22 6.43187C22 5.71857 21.857 5.01225 21.5791 4.35328C21.3013 3.69431 20.8941 3.09559 20.3807 2.59133Z\"\n                        fill=\"currentColor\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                    />\n                </svg>\n            </button>\n            <div className={styles.img_wrp}>\n                <img className={styles.img} src={image} alt={title} />\n            </div>\n            <div className={styles.card_body}>\n                <div className={styles.card_characteristics}>\n                    <div className={styles.ranking}>\n                        <svg\n                            className={styles.ranking_star}\n                            viewBox=\"0 0 1024 1024\"\n                            height=\"1em\"\n                            width=\"1em\"\n                        >\n                            <path d=\"M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 00.6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0046.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3z\" />\n                        </svg>\n                        <div>{ranking}</div>\n                    </div>\n                    <div className={styles.episodes}>{episodes} episodes</div>\n                </div>\n                <h2 className={styles.title}>{title}</h2>\n            </div>\n            <button\n                type=\"button\"\n                className={`${styles.view_btn} btn btn-primary`}\n                onClick={() => handleClickDetailedPage(id)}\n            >\n                View more\n            </button>\n        </article>\n    );\n}\n\nCard.propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    ranking: PropTypes.number.isRequired,\n    episodes: PropTypes.number.isRequired,\n};\n\nexport {Card};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"CardList_wrapper__wb2Tq\"};","import PropTypes from 'prop-types';\nimport {Card} from '../Card/Card';\nimport {AnimeWithId} from '../../types/state';\n\nimport {SetFavoritesAnime} from '../../types/setFavorites';\nimport styles from './CardList.module.css';\n\ntype CardListProps = {\n    cards: AnimeWithId[] | null;\n    setFavoritesAnime?: SetFavoritesAnime;\n};\n\nfunction CardList({cards, setFavoritesAnime}: CardListProps) {\n    const cardList = cards?.map((item) => (\n        <li key={item.id}>\n            <Card\n                id={item.id}\n                title={item.title}\n                image={item.image}\n                ranking={item.ranking}\n                episodes={item.episodes}\n                setFavoritesAnime={setFavoritesAnime}\n            />\n        </li>\n    ));\n\n    return <ul className={styles.wrapper}>{cardList}</ul>;\n}\n\nCardList.defaultProps = {\n    cards: null,\n};\n\nCardList.propTypes = {\n    cards: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            image: PropTypes.string.isRequired,\n            ranking: PropTypes.number.isRequired,\n            episodes: PropTypes.number.isRequired,\n        })\n    ),\n    setFavoritesAnime: PropTypes.func.isRequired,\n};\n\nexport {CardList};\n","import {AnimeWithId} from '../types/state';\n\n// Filters an array of objects of AnimeInfo type, returning an array of objects only with those titles that include user's query in input\n\nexport const applyFilter = (userInput: string | null, data: AnimeWithId[] | null) => {\n    if (!userInput || !data) {\n        return null;\n    }\n\n    return data.filter((anime) => anime.title.toLowerCase().includes(userInput.toLowerCase()));\n};\n","import {HistoryRecord} from '../types/HistoryRecord';\nimport {AnimeWithId} from '../types/state';\n\n// Updates the history of queries made by a logged-in user, by adding a new history record\n\nexport const updateHistory = (user: string, query: string, queryResult: AnimeWithId[] | null) => {\n    if (query === '') {\n        return;\n    }\n\n    const storageID = `searchHistory_${user}`;\n    const currentHistory = JSON.parse(localStorage.getItem(storageID) || '[]');\n\n    const historyRecord: HistoryRecord = {\n        query,\n        timestamp: new Date().toLocaleString(),\n        queryResultNumber: queryResult?.length || 0,\n        queryResultLink: `/anime-list/search/?query=${encodeURIComponent(query)}`,\n    };\n\n    const updatedHistory = [historyRecord, ...currentHistory];\n    localStorage.setItem(storageID, JSON.stringify(updatedHistory));\n};\n","import cn from 'classnames';\nimport {AnimeWithId} from '../../types/state';\n\ntype SearchResultsListProps = {\n    input: string;\n    results: AnimeWithId[] | null;\n    maxResults: number;\n};\n\nfunction SearchResultsList({input, results, maxResults}: SearchResultsListProps) {\n    const filteredResults = results?.slice(0, maxResults);\n    return (\n        <div\n            className={cn('search-results-list__wrp', 'dropdown-menu', {\n                show: !!input,\n            })}\n            style={{marginTop: '10px'}}\n        >\n            {filteredResults?.map((result) => (\n                <a\n                    href={`/anime-list/detailed-item/${result.id}`}\n                    className=\"dropdown-item\"\n                    key={result.id}\n                >\n                    {result.title}\n                </a>\n            ))}\n        </div>\n    );\n}\n\nexport {SearchResultsList};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SearchBar_wrapper__KGK67\",\"input\":\"SearchBar_input__bIy50\"};","import React, {useState} from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport {debounce} from 'lodash';\nimport PropTypes from 'prop-types';\nimport {applyFilter} from '../../services/applyFilter';\nimport {updateHistory} from '../../services/updateHistory';\nimport {useAppSelector} from '../../hooks';\nimport {getUserName} from '../../store/auth/selectors';\nimport {SearchResultsList} from '../SearchResultsList/SearchResultsList';\n\nimport {AnimeWithId} from '../../types/state';\n\nimport styles from './SearchBar.module.css';\n\ntype SearchProps = {\n    data: AnimeWithId[] | null;\n};\n\nfunction SearchBar({data}: SearchProps) {\n    const [input, setInput] = useState<string>('');\n    const [suggests, setSuggests] = useState<AnimeWithId[] | null>(null);\n\n    const user = useAppSelector(getUserName);\n\n    const navigate = useNavigate();\n\n    const debouncedGenerateSuggests = debounce((userInput: string) => {\n        const filteredAnime = applyFilter(userInput, data);\n        setSuggests(filteredAnime);\n    }, 300);\n\n    const handleChange = ({target: {value}}: React.ChangeEvent<HTMLInputElement>) => {\n        setInput(value);\n        debouncedGenerateSuggests(value);\n    };\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        setSuggests(null);\n\n        const query = (event.target as HTMLFormElement).search.value;\n        const queryResult = applyFilter(query, data);\n\n        if (user) {\n            updateHistory(user, query, queryResult);\n        }\n\n        navigate(\n            `/anime-list/search/?query=${query}&results=${encodeURIComponent(\n                JSON.stringify(queryResult)\n            )}`\n        );\n    };\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit} className={styles.wrapper}>\n                <input\n                    type=\"search\"\n                    value={input}\n                    className={styles.input}\n                    placeholder=\"Search...\"\n                    name=\"search\"\n                    autoComplete=\"off\"\n                    onChange={handleChange}\n                />\n                <button type=\"submit\" className=\"btn btn-secondary my-2 my-sm-0\">\n                    Search\n                </button>\n            </form>\n            {input && <SearchResultsList input={input} results={suggests} maxResults={5} />}\n        </div>\n    );\n}\n\nSearchBar.defaultProps = {\n    data: null,\n};\n\nSearchBar.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            image: PropTypes.string.isRequired,\n            ranking: PropTypes.number.isRequired,\n            episodes: PropTypes.number.isRequired,\n            setFavoritesAnime: PropTypes.func.isRequired,\n        })\n    ),\n};\n\nexport {SearchBar};\n","import {useEffect, useState} from 'react';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst options: any = {\n    method: 'GET',\n    headers: {\n        'X-RapidAPI-Key': process.env.REACT_APP_EHB_ACCESS_KEY,\n        'X-RapidAPI-Host': 'anime-db.p.rapidapi.com',\n    },\n};\n\nconst useDataFetching = (url: string, pageName: string) => {\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(url, options);\n                const json = await response.json();\n                switch (pageName) {\n                    case 'main':\n                    case 'search':\n                        setData(json.data);\n                        break;\n                    case 'datailed-page':\n                        setData(json);\n                        break;\n                    default:\n                        break;\n                }\n            } catch (error) {\n                // eslint-disable-next-line no-console\n                console.log('error', error);\n            }\n        };\n        fetchData();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return data;\n};\n\nexport {useDataFetching};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Search_container__xaI+z\",\"title\":\"Search_title__ZPO6U\"};","import {useLocation} from 'react-router-dom';\nimport {CardList} from '../../components/CardList/CardList';\nimport {SearchBar} from '../../components/SearchBar/SearchBar';\nimport {useDataFetching} from '../../hooks/useDataFetching';\nimport {renameIdsInData} from '../../services/renameIdsInData';\n\nimport styles from './Search.module.css';\n\nfunction Search() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const fetchedAnimes: any = useDataFetching(\n        'https://anime-db.p.rapidapi.com/anime?page=1&size=20&search=Fullmetal&genres=Fantasy%2CDrama&sortBy=ranking&sortOrder=asc',\n        'search'\n    );\n    const animeDataBase = renameIdsInData(fetchedAnimes);\n\n    const location = useLocation();\n\n    const userQuery = new URLSearchParams(location.search).get('query');\n    const queryResult = new URLSearchParams(location.search).get('results');\n    const matchingAnimes = queryResult ? JSON.parse(decodeURIComponent(queryResult)) : [];\n\n    const isDataLoading = !animeDataBase;\n\n    let message;\n    if (isDataLoading) {\n        message = 'Loading...';\n    } else if (userQuery === null || userQuery.length === 0 || matchingAnimes.length === 0) {\n        message = 'No matching Anime...';\n    } else {\n        message = 'Search Results:';\n    }\n\n    return (\n        <div className={styles.container}>\n            <SearchBar data={animeDataBase} />\n            <h4 className={styles.title}>{message}</h4>\n            <CardList cards={matchingAnimes} />\n        </div>\n    );\n}\n\nexport {Search};\n","import {AnimeWithId} from '../types/state';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst renameIdsInData = (data: any[]): AnimeWithId[] =>\n    data?.map((item) => {\n        const {_id, ...rest} = item;\n        return {...rest, id: _id} as AnimeWithId;\n    });\n\nexport {renameIdsInData};\n"],"names":["Card","_ref","id","title","image","ranking","episodes","_ref$setFavoritesAnim","setFavoritesAnime","navigate","useNavigate","_useState","useState","localStorage","getItem","JSON","stringify","_useState2","_slicedToArray","isFavorite","setIsFavorite","_jsxs","className","concat","styles","card","children","_jsx","favoriteButton","favorite","type","onClick","idAnime","Object","values","map","item","parse","setItem","handleLikeClick","width","height","viewBox","fill","xmlns","d","strokeLinecap","strokeLinejoin","img_wrp","img","src","alt","card_body","card_characteristics","ranking_star","view_btn","CardList","cards","cardList","wrapper","defaultProps","applyFilter","userInput","data","filter","anime","toLowerCase","includes","updateHistory","user","query","queryResult","storageID","currentHistory","updatedHistory","timestamp","Date","toLocaleString","queryResultNumber","length","queryResultLink","encodeURIComponent","_toConsumableArray","SearchResultsList","input","results","maxResults","filteredResults","slice","cn","show","style","marginTop","result","href","SearchBar","setInput","_useState3","_useState4","suggests","setSuggests","useAppSelector","getUserName","debouncedGenerateSuggests","debounce","filteredAnime","onSubmit","event","preventDefault","target","search","value","placeholder","name","autoComplete","onChange","_ref2","options","method","headers","process","useDataFetching","url","pageName","setData","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","json","wrap","_context","prev","next","fetch","sent","t0","abrupt","t1","console","log","stop","apply","arguments","Search","message","fetchedAnimes","animeDataBase","renameIdsInData","location","useLocation","userQuery","URLSearchParams","get","matchingAnimes","decodeURIComponent","container","_id","rest","_objectWithoutProperties","_excluded","_objectSpread"],"sourceRoot":""}